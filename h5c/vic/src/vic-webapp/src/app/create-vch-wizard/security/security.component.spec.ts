/*
 Copyright 2017 VMware, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
import {ComponentFixture, TestBed, async} from '@angular/core/testing';
import {ReactiveFormsModule, FormArray} from '@angular/forms';
import {ClarityModule} from 'clarity-angular';
import {HttpModule} from '@angular/http';
import {CreateVchWizardService} from '../create-vch-wizard.service';
import {Observable} from 'rxjs/Observable';
import {SecurityComponent} from './security.component';

describe('SecurityComponent', () => {

  let component: SecurityComponent;
  let fixture: ComponentFixture<SecurityComponent>;
  let service: CreateVchWizardService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [
        ReactiveFormsModule,
        HttpModule,
        ClarityModule
      ],
      providers: [
        {
          provide: CreateVchWizardService,
          useValue: {
            getUserId() {
              return Observable.of('userId');
            },
            getServerThumbprint() {
              return Observable.of('serverThumbprint');
            },
            getVcHostname() {
              return Observable.of('vcHostname');
            }
          }
        }
      ],
      declarations: [
        SecurityComponent
      ]
    });
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(SecurityComponent);
    component = fixture.componentInstance;
    component.vchName = 'vch-example-name';
    component.onPageLoad();

    service = fixture.debugElement.injector.get(CreateVchWizardService);
    spyOn(service, 'getUserId').and.callThrough();
    spyOn(service, 'getServerThumbprint').and.callThrough();
    spyOn(service, 'getVcHostname').and.callThrough();
  });

  it('should be created', () => {
    expect(component).toBeTruthy();
  });

  it('should start with a invalid form',  () => {
    expect(component.form.invalid).toBe(true);
  });

  it('should return null for invalid controlName', () => {
    expect(component.addNewFormArrayEntry(null)).toBeUndefined();
    expect(component.removeFormArrayEntry(null, 0)).toBeUndefined();
  });

  it('should validate advanced fields changes', () => {
    expect(component.form.get('certificateKeySize').enabled).toBeTruthy();
  });

  it('should add and remove client certificate entries', () => {
    component.addNewFormArrayEntry('tlsCas');
    expect(component.form.get('tlsCas')['controls'].length).toBe(2);
    component.removeFormArrayEntry('tlsCas', 1);
    expect(component.form.get('tlsCas')['controls'].length).toBe(1);
    component.removeFormArrayEntry('tlsCas', 0);
    // It should not remove the last one (only its contents) so the user can add a new entry.
    expect(component.form.get('tlsCas')['controls'].length).toBe(1);
  });

  it('should set controls for server cert source - autogenerated', () => {
    component.form.get('serverCertSource').patchValue('autogenerated');
    expect(component.form.get('tlsCname').enabled).toBeTruthy();
    expect(component.form.get('certificateKeySize').enabled).toBeTruthy();
    expect(component.form.get('tlsServerCert').enabled).toBeFalsy();
    expect(component.form.get('tlsServerKey').enabled).toBeFalsy();
  });

  it('should set controls for server cert source - existing', () => {
    component.form.get('serverCertSource').patchValue('existing');
    expect(component.form.get('tlsCname').enabled).toBeFalsy();
    expect(component.form.get('certificateKeySize').enabled).toBeFalsy();
    expect(component.form.get('tlsServerCert').enabled).toBeTruthy();
    expect(component.form.get('tlsServerKey').enabled).toBeTruthy();
  });

  it('should enable tlsCas for useClientAuth - true ', () => {
    component.form.get('useClientAuth').patchValue(true);
    expect(component.form.get('tlsCas').enabled).toBeTruthy();
  });

  it('should enable tlsCas for useClientAuth - false ', () => {
    component.form.get('useClientAuth').patchValue(false);
    expect(component.form.get('tlsCas').enabled).toBeFalsy();
  });

  it('should generate security results as expected for serverCertSource - autogenerated', async(() => {
    component.form.get('serverCertSource').patchValue('autogenerated');
    component.form.get('organization').patchValue('VMware');
    component.form.get('tlsCname').patchValue('vch-1');
    component.form.get('certificateKeySize').patchValue(2048);
    component.form.get('useClientAuth').patchValue(false);

    component.onCommit().subscribe(results => {
      expect(results.security['tlsCname']).toEqual('vch-1');
      expect(results.security['organization']).toEqual('VMware');
      expect(results.security['certificateKeySize']).toEqual(2048);
    });
  }));

  it('should generate security results as expected for serverCertSource - existing', async(() => {
    component.tlsServerCertContents = {
      name: 'filenameForCert',
      content: 'content',
      expires: 'expires'
    };

    component.tlsServerKeyContents = {
      name: 'filenameForKey',
      content: 'content',
      expires: 'expires'
    };

    component.form.get('serverCertSource').patchValue('existing');
    component.onCommit().subscribe(results => {
      expect(results.security['tlsServerCert']['name']).toBe('filenameForCert');
      expect(results.security['tlsServerKey']['name']).toBe('filenameForKey');
      expect(results.security['tlsServerCert']['content']).toBe('content');
      expect(results.security['tlsServerCert']['expires']).toBe('expires');
    });
  }));

  it('should clear tlsCaError after calling clearFileReaderError()', async(() => {
    component.tlsCaError = 'error';
    component.clearFileReaderError();
    expect(component.tlsCaError).toBeNull();
    expect(component.tlsServerError).toBeNull();
  }));
});
